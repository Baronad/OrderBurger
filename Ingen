Ingenjörsdagbok

Den kod som regelbundet användes var git status och git diff både för att kolla statusen i arbetskatalogen och för att kolla om gruppmedlemmarna hade gjort förändringar i scriptet.
I början av programmet så användes git init för att starta projektet och för att starta ett github projekt. Sedan så användes git log för att kolla för att kolla git historiken på vårt projekt, men även git rm <> som tar bort en fil; detta för att kunna testa sin kod. Om det inte kom med relevant information eller funktioner skulle gruppmedlemmarna skriva git rm på filen eller spara den till senare då den fortfarande kan ha nödvändig kod. Jag behövde använda git mv som gör så att filen döps om i och med att jag döpte mitt mitt första script till OrderBurger när det egentligen skulle ha OrderBurgerMain som namn. När gruppmedlemmarna skulle skapa en branch användes kommandot git branch för att skapa en branch och i samband med det så användes flitigt git checkout för att kolla statusen på branchen och specifika commits. 

Den största svårigheten var att sammankoppla vår kod då koden för BurgerOrder var i node.js och koden för webbsidan var i HTML och CSS, då dessa programmeringspråk går bra ihop då man kan skriva <style> och implementera javascript koden så var detta ett bekymmer från början men sedan något vi hittade en lösning till. Det var även bekymmer med hemsidan då vi först inte kunde bestämma oss om vi skulle ha html och css på samma sida eller i två olika filer, vi valde två olika filer för att göra koden mer strukturerad.

Först visste vi inte hur man skulle implementera koden då det är två helt olika programmeringsspråk (js, html,css), alla är till för att göra hemsidor, men kommer med olika syntaxer. Vi fann en lösning som var att skriva <style> och implementerade därefter js koden med html koden. 

Konfigurationshantering är när man vill spåra förändringar i projektmiljöer, programvara eller system, det för att säkerställa att kod eller inställningar är konsekventa eller uppdaterade vilket minskar risken för att något ska gå snett senare i projektet och undelättar sammarbete. Genom att köra en konfigurationshantering så kan man undvika felet att olika versioner av programvara körs i olika miljöer. Det vanligaste arbetsflödet i github är utan tvekan ett Branch-baserat system där alla ger relevanta och uppdaterade commits. Användningen av git underlättade då git tillåter ett Branch-baserat system och att ha en gemensam kodbas gjorde att vi enkelt kunde sammarbeta och uppdatera våra projekt med commits. Branch-systemet hjälpte även till att isolera utvecklingsspår med hjälp av git log och git branch. I samband med att vi jobbade på github så uppstod även merge bekymmer då alla hade olika versioner på programmen och att flera personer jobbade på samma fil. Det kunde även vara svårt att hålla koll på rätt konfigurationsfiler då de alla har olika versioner. Merge bekymrena löste vi genom att manuellt slå ihop och commita då vi noga gått igenom versionerna av filerna. Vi lärde oss även att man måste samarbeta och säga till när man behöver hjälp, samt om hur mycket man commmitar och vilka förändringar man gör kan ha stor inverkan för hur ett projekt i slutändan går. Vi kunde även ha implementerat fler kodgranskningar så att vi hade märkt av om det var fel i koden innan vi commitade. Dokumentation av processer är även viktiga för att alla ska förstå vad som händer i programmet om man laddar ner olika commits. 

